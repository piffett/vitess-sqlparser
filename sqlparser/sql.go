// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:46
type yySymType struct {
	yys              int
	empty            struct{}
	statement        Statement
	selStmt          SelectStatement
	ins              *Insert
	byt              byte
	bytes            []byte
	bytes2           [][]byte
	str              string
	selectExprs      SelectExprs
	selectExpr       SelectExpr
	columns          Columns
	colName          *ColName
	tableExprs       TableExprs
	tableExpr        TableExpr
	tableName        TableName
	tableNames       TableNames
	indexHints       *IndexHints
	expr             Expr
	exprs            Exprs
	boolVal          BoolVal
	colTuple         ColTuple
	values           Values
	valTuple         ValTuple
	subquery         *Subquery
	whens            []*When
	when             *When
	orderBy          OrderBy
	order            *Order
	limit            *Limit
	updateExprs      UpdateExprs
	updateExpr       *UpdateExpr
	colIdent         ColIdent
	colIdents        []ColIdent
	tableIdent       TableIdent
	convertType      *ConvertType
	aliasedTableName *AliasedTableExpr
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALL = 57361
const DISTINCT = 57362
const AS = 57363
const EXISTS = 57364
const ASC = 57365
const DESC = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const VALUES = 57373
const LAST_INSERT_ID = 57374
const NEXT = 57375
const VALUE = 57376
const SHARE = 57377
const MODE = 57378
const SQL_NO_CACHE = 57379
const SQL_CACHE = 57380
const JOIN = 57381
const STRAIGHT_JOIN = 57382
const LEFT = 57383
const RIGHT = 57384
const INNER = 57385
const OUTER = 57386
const CROSS = 57387
const NATURAL = 57388
const USE = 57389
const FORCE = 57390
const ON = 57391
const ID = 57392
const HEX = 57393
const STRING = 57394
const INTEGRAL = 57395
const FLOAT = 57396
const HEXNUM = 57397
const VALUE_ARG = 57398
const LIST_ARG = 57399
const COMMENT = 57400
const NULL = 57401
const TRUE = 57402
const FALSE = 57403
const OR = 57404
const AND = 57405
const NOT = 57406
const BETWEEN = 57407
const CASE = 57408
const WHEN = 57409
const THEN = 57410
const ELSE = 57411
const END = 57412
const LE = 57413
const GE = 57414
const NE = 57415
const NULL_SAFE_EQUAL = 57416
const IS = 57417
const LIKE = 57418
const REGEXP = 57419
const IN = 57420
const SHIFT_LEFT = 57421
const SHIFT_RIGHT = 57422
const DIV = 57423
const MOD = 57424
const UNARY = 57425
const COLLATE = 57426
const BINARY = 57427
const INTERVAL = 57428
const JSON_EXTRACT_OP = 57429
const JSON_UNQUOTE_EXTRACT_OP = 57430
const CREATE = 57431
const ALTER = 57432
const DROP = 57433
const RENAME = 57434
const ANALYZE = 57435
const TABLE = 57436
const INDEX = 57437
const VIEW = 57438
const TO = 57439
const IGNORE = 57440
const IF = 57441
const UNIQUE = 57442
const USING = 57443
const SHOW = 57444
const DESCRIBE = 57445
const EXPLAIN = 57446
const DATE = 57447
const ESCAPE = 57448
const REPAIR = 57449
const OPTIMIZE = 57450
const TRUNCATE = 57451
const DATABASES = 57452
const TABLES = 57453
const VITESS_KEYSPACES = 57454
const VITESS_SHARDS = 57455
const VSCHEMA_TABLES = 57456
const INTEGER = 57457
const CHARACTER = 57458
const CURRENT_TIMESTAMP = 57459
const DATABASE = 57460
const CURRENT_DATE = 57461
const CURRENT_TIME = 57462
const LOCALTIME = 57463
const LOCALTIMESTAMP = 57464
const UTC_DATE = 57465
const UTC_TIME = 57466
const UTC_TIMESTAMP = 57467
const REPLACE = 57468
const CONVERT = 57469
const CAST = 57470
const GROUP_CONCAT = 57471
const SEPARATOR = 57472
const MATCH = 57473
const AGAINST = 57474
const BOOLEAN = 57475
const LANGUAGE = 57476
const WITH = 57477
const QUERY = 57478
const EXPANSION = 57479
const UNUSED = 57480

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"USING",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VSCHEMA_TABLES",
	"INTEGER",
	"CHARACTER",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 23,
	-2, 4,
	-1, 223,
	103, 337,
	-2, 333,
	-1, 224,
	103, 338,
	-2, 334,
	-1, 450,
	5, 23,
	-2, 288,
	-1, 486,
	103, 340,
	-2, 336,
	-1, 595,
	5, 24,
	-2, 170,
	-1, 659,
	5, 24,
	-2, 289,
	-1, 699,
	5, 23,
	-2, 291,
	-1, 745,
	5, 24,
	-2, 292,
}

const yyPrivate = 57344

const yyLast = 3887

var yyAct = [...]int{
	240, 741, 409, 724, 224, 686, 350, 279, 44, 478,
	583, 348, 255, 704, 685, 547, 584, 218, 653, 485,
	192, 629, 352, 622, 516, 302, 550, 580, 61, 564,
	328, 3, 445, 89, 182, 244, 308, 183, 253, 219,
	332, 327, 317, 242, 43, 182, 201, 774, 769, 497,
	773, 88, 208, 18, 48, 549, 182, 182, 764, 18,
	257, 182, 772, 495, 768, 689, 220, 207, 190, 184,
	185, 186, 187, 188, 50, 51, 52, 53, 698, 722,
	763, 229, 490, 610, 182, 234, 182, 69, 500, 612,
	182, 226, 79, 206, 80, 80, 64, 41, 340, 356,
	353, 198, 77, 41, 598, 73, 68, 471, 473, 421,
	597, 596, 211, 82, 83, 84, 227, 230, 85, 81,
	399, 400, 729, 60, 238, 18, 753, 379, 378, 388,
	389, 381, 382, 383, 384, 385, 386, 387, 380, 339,
	638, 390, 494, 496, 493, 41, 711, 662, 448, 633,
	449, 602, 408, 344, 367, 366, 379, 378, 388, 389,
	381, 382, 383, 384, 385, 386, 387, 380, 336, 41,
	390, 368, 390, 368, 611, 472, 609, 380, 365, 498,
	390, 343, 691, 179, 762, 565, 41, 233, 346, 540,
	499, 541, 63, 754, 72, 70, 74, 523, 540, 40,
	541, 540, 66, 541, 304, 40, 341, 639, 310, 760,
	182, 521, 522, 520, 370, 367, 366, 182, 182, 62,
	182, 67, 76, 71, 65, 75, 366, 565, 305, 645,
	182, 736, 368, 61, 740, 182, 61, 542, 182, 640,
	347, 182, 368, 355, 239, 235, 542, 40, 369, 542,
	615, 616, 617, 306, 41, 326, 750, 241, 543, 367,
	366, 241, 367, 366, 519, 45, 693, 543, 714, 717,
	543, 40, 236, 211, 731, 241, 368, 314, 759, 368,
	627, 241, 555, 367, 366, 654, 361, 379, 378, 388,
	389, 381, 382, 383, 384, 385, 386, 387, 380, 315,
	368, 390, 627, 362, 436, 437, 439, 661, 241, 509,
	511, 512, 61, 398, 510, 555, 241, 182, 315, 241,
	182, 182, 182, 182, 623, 438, 627, 220, 467, 468,
	479, 182, 453, 479, 182, 182, 342, 581, 182, 342,
	657, 182, 450, 182, 182, 315, 367, 366, 627, 434,
	61, 484, 41, 440, 603, 220, 475, 487, 182, 477,
	469, 182, 78, 368, 182, 61, 591, 486, 465, 455,
	315, 457, 503, 342, 474, 581, 211, 211, 211, 211,
	480, 517, 482, 454, 359, 456, 16, 462, 460, 594,
	211, 446, 463, 461, 593, 459, 539, 458, 504, 211,
	423, 424, 425, 426, 427, 428, 429, 202, 203, 771,
	556, 61, 767, 205, 614, 554, 464, 69, 323, 324,
	505, 333, 578, 567, 309, 61, 64, 577, 245, 552,
	765, 486, 77, 196, 518, 73, 68, 307, 544, 545,
	246, 737, 469, 696, 655, 488, 358, 569, 243, 199,
	200, 309, 193, 181, 562, 335, 61, 585, 743, 576,
	572, 220, 194, 590, 278, 45, 582, 575, 557, 558,
	595, 742, 561, 725, 573, 383, 384, 385, 386, 387,
	380, 479, 587, 390, 726, 364, 568, 599, 570, 571,
	601, 189, 47, 49, 180, 61, 61, 338, 42, 1,
	86, 579, 331, 605, 628, 191, 269, 268, 270, 271,
	272, 273, 489, 179, 274, 55, 214, 214, 222, 608,
	607, 214, 63, 492, 72, 70, 74, 225, 517, 574,
	606, 588, 66, 435, 301, 643, 418, 613, 563, 256,
	277, 508, 267, 264, 214, 618, 214, 266, 625, 62,
	214, 67, 76, 71, 65, 75, 265, 61, 636, 637,
	441, 447, 641, 372, 59, 254, 248, 647, 470, 648,
	649, 650, 651, 210, 311, 318, 316, 216, 209, 182,
	36, 518, 721, 752, 19, 46, 204, 658, 659, 660,
	15, 14, 13, 644, 221, 12, 11, 10, 9, 663,
	8, 7, 6, 5, 626, 4, 195, 61, 182, 670,
	656, 17, 182, 2, 0, 0, 0, 0, 642, 0,
	669, 0, 0, 247, 303, 0, 0, 679, 0, 0,
	319, 322, 323, 324, 320, 61, 321, 325, 0, 0,
	554, 0, 0, 675, 0, 687, 673, 0, 0, 0,
	684, 690, 681, 683, 680, 688, 486, 0, 0, 182,
	0, 0, 0, 694, 0, 585, 61, 61, 0, 674,
	214, 61, 61, 61, 697, 0, 61, 214, 334, 371,
	214, 706, 707, 708, 703, 712, 713, 0, 718, 719,
	214, 699, 716, 709, 0, 214, 695, 0, 214, 0,
	0, 214, 0, 0, 0, 730, 585, 732, 733, 727,
	410, 0, 0, 0, 0, 211, 61, 419, 670, 734,
	0, 0, 739, 0, 0, 0, 0, 0, 0, 745,
	0, 728, 0, 0, 61, 0, 61, 749, 748, 220,
	0, 0, 0, 751, 744, 0, 756, 0, 0, 0,
	757, 0, 0, 761, 0, 758, 319, 322, 323, 324,
	320, 766, 321, 325, 280, 37, 592, 0, 0, 351,
	0, 770, 351, 483, 0, 0, 0, 214, 0, 222,
	214, 214, 214, 214, 0, 0, 0, 0, 0, 0,
	0, 466, 0, 0, 214, 191, 506, 507, 334, 513,
	514, 476, 37, 214, 214, 0, 0, 222, 0, 476,
	0, 197, 0, 0, 0, 0, 212, 0, 214, 0,
	69, 214, 0, 0, 214, 0, 0, 0, 0, 64,
	0, 0, 0, 0, 0, 77, 0, 0, 73, 68,
	0, 410, 0, 0, 559, 560, 0, 0, 442, 0,
	0, 0, 250, 0, 0, 221, 60, 0, 0, 0,
	0, 0, 0, 0, 303, 0, 0, 0, 57, 0,
	0, 0, 553, 476, 0, 0, 0, 553, 553, 0,
	0, 553, 0, 221, 0, 351, 351, 0, 0, 0,
	0, 0, 0, 0, 0, 553, 553, 553, 553, 0,
	0, 351, 0, 0, 0, 0, 0, 0, 0, 600,
	553, 0, 0, 222, 54, 0, 56, 0, 0, 0,
	58, 0, 0, 0, 0, 63, 0, 72, 70, 74,
	0, 0, 0, 0, 0, 66, 381, 382, 383, 384,
	385, 386, 387, 380, 213, 676, 390, 546, 0, 351,
	0, 0, 62, 0, 67, 76, 71, 65, 75, 0,
	0, 566, 37, 0, 0, 379, 378, 388, 389, 381,
	382, 383, 384, 385, 386, 387, 380, 329, 0, 390,
	0, 0, 0, 0, 0, 635, 0, 0, 0, 221,
	0, 0, 589, 349, 0, 646, 349, 217, 0, 0,
	0, 228, 0, 0, 0, 0, 0, 363, 0, 0,
	0, 0, 0, 553, 0, 0, 410, 363, 0, 0,
	0, 664, 665, 0, 231, 0, 232, 553, 0, 0,
	237, 604, 351, 0, 0, 0, 0, 0, 0, 214,
	0, 0, 407, 0, 0, 411, 412, 413, 414, 415,
	416, 417, 0, 420, 422, 422, 422, 422, 422, 422,
	422, 422, 430, 431, 432, 433, 0, 0, 214, 0,
	0, 0, 214, 0, 0, 692, 451, 0, 553, 0,
	212, 212, 212, 212, 0, 0, 0, 0, 0, 0,
	0, 0, 553, 631, 329, 0, 0, 0, 476, 553,
	0, 0, 0, 212, 0, 0, 0, 0, 0, 0,
	349, 401, 402, 403, 404, 405, 406, 0, 0, 214,
	0, 0, 0, 723, 0, 349, 0, 0, 37, 0,
	379, 378, 388, 389, 381, 382, 383, 384, 385, 386,
	387, 380, 0, 351, 390, 0, 0, 0, 0, 0,
	313, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	337, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	345, 631, 755, 410, 351, 354, 411, 0, 357, 0,
	0, 360, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 222, 388, 389, 381, 382, 383, 384, 385, 386,
	387, 380, 701, 702, 390, 0, 0, 705, 705, 705,
	0, 0, 351, 0, 586, 0, 37, 0, 0, 0,
	0, 0, 0, 0, 0, 515, 0, 0, 524, 525,
	526, 527, 528, 529, 530, 531, 532, 533, 534, 535,
	536, 537, 538, 0, 0, 69, 0, 0, 0, 630,
	0, 0, 351, 0, 64, 0, 349, 452, 0, 0,
	77, 0, 0, 73, 68, 0, 0, 221, 0, 0,
	746, 0, 747, 0, 0, 0, 0, 0, 0, 0,
	0, 60, 0, 632, 481, 18, 0, 0, 0, 0,
	0, 0, 0, 367, 366, 0, 69, 0, 491, 0,
	0, 501, 0, 0, 502, 64, 0, 0, 0, 0,
	368, 77, 0, 0, 73, 68, 0, 0, 0, 634,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 41,
	0, 0, 60, 0, 0, 0, 0, 0, 0, 0,
	0, 179, 0, 0, 0, 0, 0, 0, 0, 0,
	63, 0, 72, 70, 74, 18, 38, 20, 21, 0,
	66, 666, 667, 668, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 30, 619, 620, 621, 62, 22, 67,
	76, 71, 65, 75, 0, 0, 0, 0, 0, 0,
	0, 0, 179, 0, 0, 0, 29, 18, 0, 41,
	0, 63, 0, 72, 70, 74, 0, 0, 69, 0,
	0, 66, 0, 0, 0, 0, 0, 64, 0, 212,
	0, 0, 586, 77, 0, 700, 73, 68, 62, 0,
	67, 330, 71, 65, 75, 0, 349, 0, 0, 0,
	0, 41, 0, 0, 181, 0, 0, 0, 0, 0,
	0, 715, 0, 0, 720, 23, 24, 26, 25, 27,
	624, 0, 0, 586, 0, 37, 0, 0, 28, 31,
	32, 0, 0, 33, 34, 35, 677, 678, 0, 0,
	379, 378, 388, 389, 381, 382, 383, 384, 385, 386,
	387, 380, 39, 0, 390, 0, 0, 0, 0, 0,
	0, 40, 0, 0, 179, 0, 0, 0, 0, 0,
	0, 0, 0, 63, 0, 72, 70, 74, 0, 652,
	0, 0, 0, 66, 0, 0, 0, 0, 0, 710,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	62, 0, 67, 330, 71, 65, 75, 0, 671, 0,
	0, 0, 672, 0, 0, 0, 0, 0, 0, 168,
	155, 129, 170, 107, 121, 178, 122, 123, 149, 95,
	137, 69, 119, 738, 110, 91, 116, 92, 108, 131,
	64, 134, 106, 157, 140, 176, 77, 144, 0, 73,
	68, 0, 0, 133, 162, 135, 154, 128, 150, 100,
	143, 171, 120, 147, 0, 0, 0, 60, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 167, 118, 148,
	90, 145, 0, 93, 96, 177, 165, 113, 114, 0,
	0, 0, 0, 0, 0, 0, 132, 136, 151, 126,
	0, 0, 0, 0, 0, 0, 735, 0, 111, 0,
	142, 0, 0, 0, 97, 94, 130, 0, 0, 0,
	99, 0, 112, 152, 0, 163, 127, 179, 166, 125,
	124, 169, 172, 161, 109, 117, 63, 115, 72, 70,
	74, 105, 164, 158, 159, 160, 66, 0, 103, 104,
	101, 102, 138, 139, 173, 174, 175, 153, 98, 0,
	0, 156, 141, 62, 0, 67, 76, 71, 65, 75,
	168, 155, 129, 170, 107, 121, 178, 122, 123, 149,
	95, 137, 69, 119, 0, 110, 91, 116, 92, 108,
	131, 64, 134, 106, 157, 140, 176, 77, 144, 0,
	73, 68, 0, 0, 133, 162, 135, 154, 128, 150,
	100, 143, 171, 120, 147, 41, 0, 0, 60, 0,
	0, 0, 0, 0, 0, 0, 0, 146, 167, 118,
	148, 90, 145, 0, 93, 96, 177, 165, 113, 114,
	0, 0, 0, 0, 0, 0, 0, 132, 136, 151,
	126, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 142, 0, 0, 0, 97, 94, 130, 0, 0,
	0, 99, 0, 112, 152, 0, 163, 127, 179, 166,
	125, 124, 169, 172, 161, 109, 117, 63, 115, 72,
	70, 74, 105, 164, 158, 159, 160, 66, 0, 103,
	104, 101, 102, 138, 139, 173, 174, 175, 153, 98,
	0, 0, 156, 141, 62, 0, 67, 76, 71, 65,
	75, 168, 155, 129, 170, 107, 121, 178, 122, 123,
	149, 95, 137, 69, 119, 0, 110, 91, 116, 92,
	108, 131, 64, 134, 106, 157, 140, 176, 77, 144,
	0, 73, 68, 0, 0, 133, 162, 135, 154, 128,
	150, 100, 143, 171, 120, 147, 0, 0, 0, 223,
	0, 0, 0, 0, 0, 0, 0, 0, 146, 167,
	118, 148, 90, 145, 0, 93, 96, 177, 165, 113,
	114, 0, 0, 0, 0, 0, 0, 0, 132, 136,
	151, 126, 0, 0, 0, 0, 0, 0, 682, 0,
	111, 0, 142, 0, 0, 0, 97, 94, 130, 0,
	0, 0, 99, 0, 112, 152, 0, 163, 127, 179,
	166, 125, 124, 169, 172, 161, 109, 117, 63, 115,
	72, 70, 74, 105, 164, 158, 159, 160, 66, 0,
	103, 104, 101, 102, 138, 139, 173, 174, 175, 153,
	98, 0, 0, 156, 141, 62, 0, 67, 76, 71,
	65, 75, 168, 155, 129, 170, 107, 121, 178, 122,
	123, 149, 95, 137, 69, 119, 0, 110, 91, 116,
	92, 108, 131, 64, 134, 106, 157, 140, 176, 77,
	144, 0, 73, 68, 0, 0, 133, 162, 135, 154,
	128, 150, 100, 143, 171, 120, 147, 0, 0, 0,
	60, 0, 0, 0, 0, 0, 0, 0, 0, 146,
	167, 118, 148, 90, 145, 0, 93, 96, 177, 165,
	113, 114, 0, 0, 0, 0, 0, 0, 0, 132,
	136, 151, 126, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 142, 0, 0, 0, 97, 94, 130,
	0, 0, 0, 99, 0, 112, 152, 0, 163, 127,
	179, 166, 125, 124, 169, 172, 161, 109, 117, 63,
	115, 72, 70, 74, 105, 164, 158, 159, 160, 66,
	0, 103, 104, 101, 102, 138, 139, 173, 174, 175,
	153, 98, 0, 0, 156, 141, 62, 0, 67, 76,
	71, 65, 75, 168, 155, 129, 170, 107, 121, 178,
	122, 123, 149, 95, 137, 69, 119, 0, 110, 91,
	116, 92, 108, 131, 64, 134, 106, 157, 140, 176,
	77, 144, 0, 73, 68, 0, 0, 133, 162, 135,
	154, 128, 150, 100, 143, 171, 120, 147, 0, 0,
	0, 223, 0, 0, 0, 0, 0, 0, 0, 0,
	146, 167, 118, 148, 90, 145, 0, 93, 96, 177,
	165, 113, 114, 0, 0, 0, 0, 0, 0, 0,
	132, 136, 151, 126, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 142, 0, 0, 0, 97, 94,
	130, 0, 0, 0, 99, 0, 112, 152, 0, 163,
	127, 179, 166, 125, 124, 169, 172, 161, 109, 117,
	63, 115, 72, 70, 74, 105, 164, 158, 159, 160,
	66, 0, 103, 104, 101, 102, 138, 139, 173, 174,
	175, 153, 98, 0, 0, 156, 141, 62, 0, 67,
	76, 71, 65, 75, 168, 155, 129, 170, 107, 121,
	178, 122, 123, 149, 95, 137, 69, 119, 0, 110,
	91, 116, 92, 108, 131, 64, 134, 106, 157, 140,
	176, 77, 144, 0, 73, 68, 0, 0, 133, 162,
	135, 154, 128, 150, 100, 143, 171, 120, 147, 0,
	0, 0, 181, 0, 0, 0, 0, 0, 0, 0,
	0, 146, 167, 118, 148, 90, 145, 0, 93, 96,
	177, 165, 113, 114, 0, 0, 0, 0, 0, 0,
	0, 132, 136, 151, 126, 0, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 142, 0, 0, 0, 97,
	94, 130, 0, 0, 0, 99, 0, 112, 152, 0,
	163, 127, 179, 166, 125, 124, 169, 172, 161, 109,
	117, 63, 115, 72, 70, 74, 105, 164, 158, 159,
	160, 66, 0, 103, 104, 101, 102, 138, 139, 173,
	174, 175, 153, 98, 0, 0, 156, 141, 62, 0,
	67, 76, 71, 65, 75, 168, 155, 129, 170, 107,
	121, 178, 122, 123, 149, 95, 137, 69, 119, 0,
	110, 91, 116, 92, 108, 131, 64, 134, 106, 157,
	140, 176, 77, 144, 0, 73, 68, 0, 0, 133,
	162, 135, 154, 128, 150, 100, 143, 171, 120, 147,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 167, 118, 148, 90, 145, 0, 93,
	96, 177, 165, 113, 114, 0, 0, 0, 0, 0,
	0, 0, 132, 136, 151, 126, 0, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 142, 0, 0, 0,
	97, 94, 130, 0, 0, 0, 99, 0, 112, 152,
	0, 163, 127, 179, 166, 125, 124, 169, 172, 161,
	109, 117, 63, 115, 72, 70, 74, 105, 164, 158,
	159, 160, 66, 0, 103, 104, 101, 102, 138, 139,
	173, 174, 175, 153, 98, 0, 0, 156, 141, 62,
	0, 67, 76, 71, 65, 75, 69, 0, 0, 548,
	0, 252, 0, 0, 0, 64, 0, 251, 0, 0,
	288, 77, 0, 0, 73, 68, 0, 0, 0, 0,
	281, 282, 0, 0, 0, 0, 0, 0, 0, 41,
	0, 0, 223, 269, 268, 270, 271, 272, 273, 0,
	0, 274, 275, 276, 0, 0, 249, 262, 0, 287,
	378, 388, 389, 381, 382, 383, 384, 385, 386, 387,
	380, 0, 0, 390, 0, 0, 0, 0, 0, 259,
	260, 551, 0, 0, 0, 299, 0, 261, 0, 0,
	258, 263, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 179, 0, 0, 297, 0, 0, 0, 0,
	0, 63, 0, 72, 70, 74, 0, 0, 0, 0,
	0, 66, 0, 289, 298, 295, 296, 293, 294, 292,
	291, 290, 300, 283, 284, 286, 0, 285, 62, 0,
	67, 76, 71, 65, 75, 69, 0, 0, 0, 0,
	252, 0, 0, 0, 64, 0, 251, 0, 0, 288,
	77, 0, 0, 73, 68, 0, 0, 0, 0, 281,
	282, 0, 0, 0, 0, 0, 0, 0, 41, 0,
	0, 223, 269, 268, 270, 271, 272, 273, 0, 0,
	274, 275, 276, 0, 0, 249, 262, 0, 287, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	551, 0, 0, 0, 299, 0, 261, 0, 0, 258,
	263, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 179, 0, 0, 297, 0, 0, 0, 0, 0,
	63, 0, 72, 70, 74, 0, 0, 0, 0, 0,
	66, 0, 289, 298, 295, 296, 293, 294, 292, 291,
	290, 300, 283, 284, 286, 0, 285, 62, 0, 67,
	76, 71, 65, 75, 69, 0, 0, 0, 0, 252,
	0, 0, 0, 64, 0, 251, 0, 0, 288, 77,
	0, 0, 73, 68, 0, 0, 0, 0, 281, 282,
	0, 0, 0, 0, 0, 0, 0, 41, 0, 241,
	223, 269, 268, 270, 271, 272, 273, 0, 0, 274,
	275, 276, 0, 0, 249, 262, 0, 287, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 259, 260, 0,
	0, 0, 0, 299, 0, 261, 0, 0, 258, 263,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	179, 0, 0, 297, 0, 0, 0, 0, 0, 63,
	0, 72, 70, 74, 0, 0, 0, 0, 0, 66,
	0, 289, 298, 295, 296, 293, 294, 292, 291, 290,
	300, 283, 284, 286, 18, 285, 62, 0, 67, 76,
	71, 65, 75, 0, 0, 69, 0, 0, 0, 0,
	252, 0, 0, 0, 64, 0, 251, 0, 0, 288,
	77, 0, 0, 73, 68, 0, 0, 0, 0, 281,
	282, 0, 0, 0, 0, 0, 0, 0, 41, 0,
	0, 223, 269, 268, 270, 271, 272, 273, 0, 0,
	274, 275, 276, 0, 0, 249, 262, 0, 287, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	0, 0, 0, 0, 299, 0, 261, 0, 0, 258,
	263, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 179, 0, 0, 297, 0, 0, 0, 0, 0,
	63, 0, 72, 70, 74, 0, 0, 0, 0, 0,
	66, 0, 289, 298, 295, 296, 293, 294, 292, 291,
	290, 300, 283, 284, 286, 0, 285, 62, 0, 67,
	330, 71, 65, 75, 69, 0, 0, 0, 0, 252,
	0, 0, 0, 64, 0, 251, 0, 0, 288, 77,
	0, 0, 73, 68, 0, 0, 0, 0, 281, 282,
	0, 0, 0, 0, 0, 0, 0, 41, 0, 0,
	223, 269, 268, 270, 271, 272, 273, 0, 0, 274,
	275, 276, 0, 0, 249, 262, 0, 287, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 259, 260, 0,
	0, 0, 0, 299, 0, 261, 0, 0, 258, 263,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	179, 0, 0, 297, 0, 0, 0, 0, 0, 63,
	0, 72, 70, 74, 0, 0, 0, 0, 0, 66,
	0, 289, 298, 295, 296, 293, 294, 292, 291, 290,
	300, 283, 284, 286, 69, 285, 62, 0, 67, 76,
	71, 65, 75, 64, 0, 0, 0, 0, 288, 77,
	0, 0, 73, 68, 0, 0, 0, 0, 281, 282,
	0, 0, 0, 0, 0, 0, 0, 41, 0, 0,
	223, 269, 268, 270, 271, 272, 273, 0, 0, 274,
	275, 276, 0, 0, 69, 262, 0, 287, 0, 0,
	0, 0, 0, 64, 0, 0, 0, 0, 0, 77,
	0, 0, 73, 68, 0, 0, 0, 259, 260, 0,
	0, 0, 0, 299, 0, 261, 0, 0, 258, 263,
	60, 0, 0, 443, 0, 0, 444, 0, 0, 0,
	179, 0, 0, 297, 0, 0, 0, 0, 0, 63,
	0, 72, 70, 74, 0, 0, 0, 0, 0, 66,
	0, 289, 298, 295, 296, 293, 294, 292, 291, 290,
	300, 283, 284, 286, 69, 285, 62, 0, 67, 76,
	71, 65, 75, 64, 0, 0, 0, 0, 0, 77,
	179, 0, 73, 68, 0, 0, 0, 0, 0, 63,
	0, 72, 70, 74, 0, 0, 0, 41, 0, 66,
	181, 0, 0, 0, 0, 0, 0, 0, 69, 0,
	0, 0, 0, 0, 0, 0, 62, 64, 67, 76,
	71, 65, 75, 77, 0, 0, 73, 68, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 60, 0, 632, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 69,
	179, 0, 0, 0, 0, 0, 0, 0, 64, 63,
	0, 72, 70, 74, 77, 69, 0, 73, 68, 66,
	0, 0, 0, 312, 64, 0, 0, 0, 0, 0,
	77, 0, 0, 73, 68, 181, 62, 335, 67, 76,
	71, 65, 75, 0, 179, 215, 0, 0, 0, 0,
	0, 181, 69, 63, 0, 72, 70, 74, 0, 0,
	0, 64, 0, 66, 0, 0, 0, 77, 0, 0,
	73, 68, 0, 0, 0, 0, 0, 0, 0, 0,
	62, 0, 67, 76, 71, 65, 75, 0, 181, 0,
	0, 0, 0, 0, 0, 179, 0, 0, 0, 0,
	0, 0, 0, 0, 63, 0, 72, 70, 74, 0,
	69, 179, 0, 0, 66, 0, 0, 0, 0, 64,
	63, 0, 72, 70, 74, 77, 0, 0, 73, 68,
	66, 62, 0, 67, 76, 71, 65, 75, 0, 0,
	0, 0, 0, 0, 0, 0, 60, 62, 179, 67,
	76, 71, 65, 75, 0, 69, 0, 63, 0, 72,
	70, 74, 0, 0, 64, 0, 0, 66, 0, 0,
	77, 0, 0, 73, 68, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 62, 0, 67, 76, 71, 65,
	75, 223, 69, 0, 0, 0, 0, 0, 0, 0,
	0, 64, 0, 0, 0, 0, 179, 77, 0, 0,
	73, 68, 0, 0, 0, 63, 0, 72, 70, 74,
	0, 0, 0, 0, 0, 66, 0, 0, 181, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 62, 0, 67, 76, 71, 65, 75, 0,
	0, 179, 0, 0, 0, 0, 0, 0, 0, 0,
	63, 0, 72, 70, 74, 0, 0, 0, 0, 0,
	66, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 62, 179, 67,
	76, 71, 65, 75, 0, 0, 0, 63, 0, 72,
	70, 74, 0, 0, 0, 0, 0, 66, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 374, 62, 377, 67, 76, 71, 65,
	75, 391, 392, 393, 394, 395, 396, 397, 0, 375,
	376, 373, 379, 378, 388, 389, 381, 382, 383, 384,
	385, 386, 387, 380, 0, 0, 390,
}

var yyPact = [...]int{
	1349, -1000, -112, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 451, 487, -1000, -1000,
	-1000, -1000, -1000, 803, -21, 8, 2, 7, 2460, 3705,
	-1000, -1000, -1000, -1000, -1000, -1000, 485, 53, -1000, -1000,
	3705, -1000, -1000, -1000, 436, 447, 95, 430, 370, -1000,
	-20, 3417, 3565, 3668, -25, 4, 3705, -62, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 6, 3705,
	-1000, 3705, -31, 192, -31, 3705, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	209, 427, 410, 3157, 3157, 451, -1000, 53, -1000, -1000,
	-1000, 404, -1000, -1000, 147, 3528, 248, 591, -1000, -1000,
	-1000, 427, 1391, 400, 65, 3705, 88, -1000, 285, -1000,
	106, -1000, 50, -1000, -1000, 3705, 121, 187, 1705, -13,
	3705, 1705, -15, 3705, 424, 335, 3705, -1000, -1000, 370,
	-1000, -1000, 302, -1000, -1000, 477, 93, 197, -1000, 3157,
	3786, -1000, 302, -1000, -1000, 16, -1000, -1000, 3287, 3287,
	3287, 3287, 3287, 3287, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 302, 49, -1000,
	3018, 302, 302, 302, 302, 302, 302, 3157, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 298, -1000, 281, 436, 209, 370, 3337, 351, -1000,
	-1000, 119, 3705, -1000, 3668, 3417, 3417, 3417, 3417, -1000,
	358, 356, -1000, 349, 348, 377, 3705, 267, 209, 1391,
	3705, 60, -1000, 3512, -1000, -1000, 2309, 470, 3417, 3705,
	-1000, -1000, 3668, 3157, 2158, 1705, 423, -36, -1000, -1000,
	-1000, -1000, -1000, 3705, 35, -1000, 3705, -1000, -1000, 3705,
	1705, 431, -1000, 53, -1000, 385, 3157, 3157, 247, 3157,
	3157, 91, 3287, 204, 128, 3287, 3287, 3287, 3287, 3287,
	3287, 3287, 3287, 3287, 3287, 3287, 3287, 3287, 3287, 3287,
	148, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 452,
	452, 72, 72, 72, 72, 72, 70, 2599, 2158, 264,
	150, 3018, 2738, 2738, 3157, 3157, 2738, 431, 114, 150,
	3623, -1000, 209, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2738, 2738, 2738, 2738, 3157, -1000, -1000, -1000, 410, -1000,
	431, 449, -1000, 396, 391, 2738, -1000, 326, 3668, 302,
	-1000, 1279, -1000, 322, 591, 317, 717, -1000, -1000, -1000,
	-1000, 355, -1000, 350, -1000, -1000, -1000, -1000, -1000, 209,
	-1000, -1, -2, -8, -1000, -1000, -1000, -1000, 451, 3157,
	319, -1000, -1000, 150, -1000, 48, -1000, -1000, -1000, 305,
	3623, 1705, -1000, 62, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 351, 378, 91, 160, -1000, -1000,
	188, -1000, -1000, 150, 150, 1044, -1000, -1000, -1000, -1000,
	204, 3287, 3287, 3287, 201, 1044, 1394, 1104, 2583, 72,
	383, 383, 80, 80, 80, 80, 80, 846, 846, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 209, 2738, 297,
	-1000, -1000, 1228, 46, 302, 3157, -1000, 229, 229, 89,
	218, 229, 2738, 156, -1000, 3157, 209, -1000, 229, 209,
	229, 229, -1000, -1000, 3705, -1000, -1000, -1000, -1000, 275,
	-1000, 418, 288, 289, -1000, -1000, 2877, 209, 256, 44,
	451, 3157, 3157, -1000, -1000, -1000, 302, 302, 302, 436,
	150, -1000, 2007, 3705, -1000, -1000, -1000, 3705, -1000, -1000,
	-1000, -1000, -1000, 2738, -1000, -1000, -1000, -1000, -1000, 201,
	1044, 879, -1000, 3287, 3287, -1000, 229, 2738, -1000, -1000,
	3461, -1000, -1000, 1856, 2738, 150, -1000, -1000, 148, 148,
	148, -84, 251, 108, -1000, 3157, 194, -1000, -1000, -1000,
	-1000, -1000, -1000, 470, 3417, 416, -1000, 302, -1000, -1000,
	47, 3623, 3623, 436, 150, 150, 3623, 3623, 3623, -1000,
	-1000, 1705, -1000, -1000, 275, -1000, 3287, 1044, 1044, -1000,
	-1000, -1000, -1000, 43, 209, 209, 136, 209, 209, 302,
	-68, -1000, 150, 3157, 461, 294, 476, -1000, 302, -1000,
	53, 19, -1000, -1000, 223, -1000, 223, 223, -1000, 470,
	1044, 1554, -1000, -1000, -1000, 175, -1000, 412, -1000, -1000,
	3287, 209, 179, 150, 458, 443, 3668, 289, 209, 3623,
	-1000, 3623, -1000, -1000, 461, -1000, 205, 148, 41, -1000,
	-1000, -1000, 3157, 3157, 285, -1000, -1000, -1000, 458, 145,
	153, -1000, 209, 34, -95, 150, 231, -1000, -1000, 401,
	209, -1000, 376, -87, -106, 148, -1000, -1000, 373, -1000,
	-1000, -90, -103, -107, -1000,
}

var yyPgo = [...]int{
	0, 613, 30, 386, 611, 606, 605, 603, 602, 601,
	600, 598, 597, 596, 595, 592, 591, 590, 54, 586,
	585, 584, 36, 32, 46, 583, 582, 23, 55, 15,
	26, 429, 18, 41, 580, 67, 52, 578, 577, 576,
	42, 575, 944, 574, 573, 568, 13, 9, 566, 565,
	563, 561, 38, 852, 560, 556, 547, 543, 542, 541,
	24, 2, 10, 7, 16, 539, 60, 12, 538, 29,
	536, 535, 3, 1, 8, 534, 25, 533, 20, 35,
	531, 27, 17, 39, 529, 362, 187, 527, 523, 520,
	519, 515, 512, 22, 4, 540, 6, 21, 504, 464,
	19, 40, 502, 43, 37, 11, 5, 14, 500, 499,
	498, 764, 0, 497, 493, 109,
}

var yyR1 = [...]int{
	0, 109, 110, 110, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	3, 3, 34, 4, 4, 5, 5, 6, 6, 21,
	21, 7, 8, 8, 113, 113, 38, 38, 9, 10,
	10, 10, 10, 11, 11, 11, 11, 12, 13, 13,
	13, 14, 108, 108, 108, 15, 16, 17, 17, 17,
	17, 17, 17, 114, 18, 19, 19, 20, 20, 20,
	24, 24, 24, 22, 22, 23, 23, 29, 29, 28,
	28, 30, 30, 30, 30, 98, 98, 98, 97, 97,
	32, 32, 33, 33, 35, 35, 36, 36, 36, 44,
	37, 37, 37, 37, 103, 103, 102, 102, 102, 101,
	101, 39, 39, 39, 39, 40, 40, 40, 40, 41,
	41, 43, 43, 42, 42, 45, 45, 45, 45, 46,
	46, 47, 47, 31, 31, 31, 31, 31, 31, 31,
	49, 49, 48, 48, 48, 48, 48, 48, 48, 48,
	48, 48, 59, 59, 59, 59, 59, 59, 50, 50,
	50, 50, 50, 50, 50, 27, 27, 60, 60, 60,
	66, 61, 61, 106, 106, 106, 106, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 57, 57, 57,
	55, 55, 55, 55, 55, 55, 55, 55, 55, 56,
	56, 56, 56, 56, 56, 56, 56, 115, 115, 58,
	58, 58, 58, 25, 25, 25, 25, 25, 107, 107,
	107, 107, 107, 107, 107, 107, 70, 70, 26, 26,
	68, 68, 69, 71, 71, 67, 67, 67, 52, 52,
	52, 52, 52, 52, 52, 54, 54, 54, 72, 72,
	73, 73, 74, 74, 75, 75, 76, 77, 77, 77,
	78, 78, 78, 78, 79, 79, 79, 51, 51, 51,
	51, 51, 51, 80, 80, 80, 80, 81, 81, 62,
	62, 64, 64, 63, 65, 82, 82, 83, 84, 84,
	86, 86, 87, 87, 85, 85, 88, 88, 88, 88,
	88, 88, 88, 89, 89, 89, 90, 90, 91, 91,
	91, 92, 92, 95, 95, 96, 96, 99, 99, 100,
	100, 93, 93, 93, 93, 93, 93, 93, 93, 93,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
	94, 94, 94, 94, 94, 94, 94, 94, 94, 94,
	94, 94, 94, 94, 94, 94, 94, 111, 112, 104,
	105, 105, 105,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 6, 7,
	11, 10, 4, 1, 3, 1, 3, 6, 7, 1,
	1, 8, 7, 6, 1, 1, 1, 3, 3, 5,
	8, 4, 6, 6, 7, 7, 4, 5, 4, 5,
	5, 3, 1, 1, 1, 3, 2, 2, 2, 2,
	2, 2, 2, 0, 2, 0, 2, 1, 2, 2,
	0, 1, 1, 0, 1, 0, 1, 0, 1, 1,
	3, 1, 2, 3, 5, 0, 1, 2, 1, 1,
	0, 2, 1, 3, 1, 1, 1, 3, 3, 3,
	3, 5, 5, 3, 0, 1, 0, 1, 2, 1,
	1, 1, 2, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 1, 1, 3, 0, 5, 5, 5, 1,
	3, 0, 2, 1, 3, 3, 2, 3, 1, 1,
	1, 1, 3, 3, 4, 4, 5, 3, 4, 5,
	6, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 0, 2, 1, 1, 1,
	3, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 2,
	2, 2, 3, 1, 1, 1, 1, 4, 5, 6,
	4, 4, 6, 6, 6, 9, 7, 5, 4, 2,
	2, 2, 2, 2, 2, 2, 2, 0, 2, 4,
	4, 4, 4, 0, 3, 4, 7, 3, 1, 2,
	4, 5, 7, 2, 4, 6, 0, 1, 0, 2,
	1, 2, 4, 0, 2, 1, 3, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 0, 3,
	0, 2, 0, 3, 1, 3, 2, 0, 1, 1,
	0, 2, 4, 4, 0, 2, 4, 2, 1, 3,
	5, 4, 6, 1, 3, 3, 5, 0, 5, 1,
	3, 1, 2, 3, 1, 1, 3, 3, 1, 1,
	0, 2, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 0, 1,
	1, 0, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	0, 1, 1,
}

var yyChk = [...]int{
	-1000, -109, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -16, -17, -3, -4, 6, -21,
	8, 9, 29, 106, 107, 109, 108, 110, 119, 47,
	24, 120, 121, 124, 125, 126, -34, -111, 7, 143,
	152, 50, -110, 156, -74, 14, -20, 5, -18, -114,
	-18, -18, -18, -18, 111, -91, 113, 65, 117, -95,
	53, -94, 149, 122, 26, 154, 132, 151, 36, 17,
	125, 153, 124, 35, 126, 155, 152, 32, -85, 113,
	115, 111, 111, 112, 113, 111, -108, 53, -93, -94,
	66, 21, 23, 69, 101, 15, 70, 100, 144, 106,
	45, 136, 137, 134, 135, 127, 28, 9, 24, 120,
	20, 94, 108, 73, 74, 123, 22, 121, 64, 18,
	48, 10, 12, 13, 116, 115, 85, 112, 43, 7,
	102, 25, 82, 39, 27, 41, 83, 16, 138, 139,
	30, 148, 96, 46, 33, 67, 62, 49, 65, 14,
	44, 84, 109, 143, 42, 6, 147, 29, 129, 130,
	131, 119, 40, 111, 128, 72, 114, 63, 5, 117,
	8, 47, 118, 140, 141, 142, 31, 71, 11, 113,
	-99, 53, -94, -104, -104, -104, -104, -104, -104, 6,
	-2, -99, -78, 16, 15, -5, -3, -111, 6, 19,
	20, -24, 37, 38, -19, -85, -33, -35, -36, -37,
	-44, -66, -111, -42, -99, 10, -38, -42, -82, -83,
	-67, -95, -99, 53, -94, -87, 116, 112, -42, 143,
	111, -42, -42, -86, 116, 53, -86, -42, -104, -18,
	-112, 52, -103, 21, -79, 18, 30, -31, -48, 67,
	-53, 28, 22, -52, -49, -67, -65, -66, 101, 90,
	91, 98, 68, 102, -57, -55, -56, -58, 55, 54,
	56, 57, 58, 59, 62, 63, 64, -95, -99, -63,
	-111, 41, 42, 144, 145, 148, 146, 70, 31, 134,
	142, 141, 140, 138, 139, 136, 137, 116, 135, 96,
	143, -75, -76, -31, -74, -2, -18, 33, -22, 20,
	61, -43, 25, -42, 29, 51, -39, -40, -41, 39,
	43, 45, 40, 41, 42, 46, -103, -33, -2, -111,
	152, -102, -101, 21, -99, 55, 103, -42, -113, 51,
	10, 118, 51, 75, 103, -42, 67, 53, -105, -111,
	-96, -95, -93, 113, -42, -105, 114, -42, 22, 49,
	-42, -24, -66, -111, 8, 85, 66, 65, 82, 51,
	17, -31, -50, 85, 67, 83, 84, 69, 87, 86,
	97, 90, 91, 92, 93, 94, 95, 96, 88, 89,
	100, 75, 76, 77, 78, 79, 80, 81, -66, 104,
	105, -53, -53, -53, -53, -53, -53, -111, 103, -61,
	-31, -111, -111, -111, -111, -111, -111, -111, -70, -31,
	-111, -115, -111, -115, -115, -115, -115, -115, -115, -115,
	-111, -111, -111, -111, 51, -77, 23, 24, -78, -112,
	-24, -54, -95, 56, 59, -23, 40, -51, 29, 31,
	-2, -111, -42, -82, -35, -36, -35, -36, 39, 39,
	39, 44, 39, 44, 39, -40, -99, -112, -112, -2,
	-45, 47, 115, 48, -101, -100, -99, -93, -47, 11,
	-33, -42, -83, -31, -96, -100, -93, -105, 22, -92,
	118, -42, -88, 109, 107, 28, 108, 14, 144, 155,
	53, -42, -42, -105, -22, 35, -31, -31, -59, 62,
	67, 63, 64, -31, -31, -53, -60, -63, -66, 60,
	85, 83, 84, 69, -53, -53, -53, -53, -53, -53,
	-53, -53, -53, -53, -53, -53, -53, -53, -53, -106,
	53, 55, 101, 122, -52, -52, -95, -29, 20, -28,
	-30, 92, -31, -99, -96, 51, -112, -28, -28, -31,
	-31, -28, -22, -68, -69, 71, -95, -112, -28, -29,
	-28, -28, -76, -79, -84, 18, 10, 31, 31, -28,
	-81, 49, -82, -62, -64, -63, -111, -2, -80, -95,
	-47, 49, 49, 39, 39, -112, 112, 112, 112, -74,
	-31, -47, 103, 49, -95, -105, -104, -89, -90, 114,
	21, 112, 27, -23, 36, 62, 63, 64, -60, -53,
	-53, -53, -27, 123, 66, -112, -28, 51, -98, -97,
	21, -95, 55, 103, -111, -31, -112, -112, 51, 118,
	21, -112, -28, -71, -69, 73, -31, -112, -112, -112,
	-112, -112, -42, -32, 10, 26, -81, 51, -112, -112,
	-112, 51, 103, -74, -31, -31, -111, -111, -111, -78,
	-96, -42, -42, -104, -28, -27, 66, -53, -53, -112,
	-30, -97, 92, -100, -29, -107, -106, -106, -107, 149,
	-74, 74, -31, 72, -47, -33, 27, -64, 31, -2,
	-111, -95, -95, -78, -46, -95, -46, -46, -105, -32,
	-53, 103, -112, -112, 132, -111, -106, 133, -112, -112,
	-111, -26, 147, -31, -72, 12, 8, -62, -2, 103,
	-112, 51, -112, -112, -47, 92, 56, 29, -53, -112,
	55, -73, 13, 15, -82, -112, -95, -95, -72, -112,
	51, -106, -25, 85, 152, -31, -61, -73, -106, 133,
	56, -112, 150, 46, 153, 29, -112, 36, 151, 154,
	-106, 36, 152, 153, 154,
}

var yyDef = [...]int{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 272, 0, 63, 63,
	63, 63, 63, 328, 314, 0, 0, 0, 0, 0,
	449, 449, 449, 449, 449, 449, 0, 0, 29, 30,
	0, 447, 1, 3, 280, 0, 0, 67, 70, 65,
	314, 0, 0, 0, 312, 0, 444, 0, 329, 330,
	333, 334, 430, 431, 432, 433, 434, 435, 436, 437,
	438, 439, 440, 441, 442, 443, 445, 446, 0, 0,
	315, 0, 310, 0, 310, 0, 449, 52, 53, 54,
	341, 342, 343, 344, 345, 346, 347, 348, 349, 350,
	351, 352, 353, 354, 355, 356, 357, 358, 359, 360,
	361, 362, 363, 364, 365, 366, 367, 368, 369, 370,
	371, 372, 373, 374, 375, 376, 377, 378, 379, 380,
	381, 382, 383, 384, 385, 386, 387, 388, 389, 390,
	391, 392, 393, 394, 395, 396, 397, 398, 399, 400,
	401, 402, 403, 404, 405, 406, 407, 408, 409, 410,
	411, 412, 413, 414, 415, 416, 417, 418, 419, 420,
	421, 422, 423, 424, 425, 426, 427, 428, 429, 444,
	56, 337, 338, 57, 58, 59, 60, 61, 62, 63,
	23, 104, 284, 0, 0, 272, 25, 0, 63, 68,
	69, 73, 71, 72, 64, 0, 0, 92, 94, 95,
	96, 104, 0, 106, 123, 0, 0, 36, 38, 305,
	0, 255, 0, -2, -2, 0, 0, 0, 450, 0,
	0, 450, 0, 0, 0, 0, 0, 51, 55, 70,
	24, 448, 0, 105, 17, 0, 0, 281, 133, 0,
	138, 139, 0, 177, 178, 179, 180, 181, 0, 0,
	0, 0, 0, 0, 203, 204, 205, 206, 258, 259,
	260, 261, 262, 263, 264, 140, 141, 255, 0, 304,
	0, 0, 0, 0, 0, 0, 0, 246, 0, 227,
	227, 227, 227, 227, 227, 227, 227, 0, 0, 0,
	0, 273, 274, 277, 280, 23, 70, 0, 75, 74,
	66, 0, 0, 122, 0, 0, 0, 0, 0, 111,
	0, 0, 114, 0, 0, 0, 0, 0, 23, 0,
	445, 125, 107, 0, 109, 110, 0, 131, 0, 0,
	34, 35, 0, 0, 0, 450, 0, 331, 41, 451,
	452, 335, 336, 0, 0, 46, 0, 48, 311, 0,
	450, 73, 22, 0, 285, 0, 0, 0, 0, 0,
	0, 136, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 158, 159, 160, 161, 162, 163, 164, 151, 0,
	0, 197, 198, 199, 200, 201, 0, 77, 0, 0,
	171, 0, 0, 0, 0, 0, 0, 73, 0, 247,
	0, 219, 0, 220, 221, 222, 223, 224, 225, 226,
	0, 77, 0, 0, 0, 276, 278, 279, 284, 26,
	73, 0, 265, 0, 0, 0, 76, 297, 0, 0,
	-2, 0, 121, 131, 93, 100, 0, 103, 112, 113,
	115, 0, 117, 0, 119, 120, 97, 98, 170, 23,
	99, 0, 0, 0, 108, 124, 339, 340, 272, 0,
	131, 37, 306, 307, 256, 0, -2, 39, 313, 0,
	0, 450, 449, 323, 316, 317, 318, 319, 320, 321,
	322, 47, 49, 50, 75, 0, 134, 135, 137, 152,
	0, 154, 156, 282, 283, 142, 143, 167, 168, 169,
	0, 0, 0, 0, 165, 147, 0, 182, 183, 184,
	185, 186, 187, 188, 189, 190, 191, 192, 193, 196,
	173, 174, 175, 176, 194, 195, 202, 0, 0, 78,
	79, 81, 85, 0, 256, 0, 303, 0, 0, 0,
	0, 0, 0, 253, 250, 0, 0, 228, 0, 0,
	0, 0, 275, 18, 0, 308, 309, 266, 267, 90,
	27, 0, 297, 287, 299, 301, 0, 23, 0, 293,
	272, 0, 0, 116, 118, -2, 0, 0, 0, 280,
	132, 33, 0, 0, 332, 42, 43, 0, 449, 324,
	325, 326, 327, 0, 286, 153, 155, 157, 144, 165,
	148, 0, 145, 0, 0, 207, 0, 0, 82, 86,
	0, 88, 89, 0, 77, 172, 210, 211, 0, 0,
	0, 0, 272, 0, 251, 0, 0, 218, 229, 230,
	231, 232, 19, 131, 0, 0, 28, 0, 302, -2,
	0, 0, 0, 280, 101, 102, 0, 0, 0, 32,
	257, 450, 44, 45, 90, 146, 0, 166, 149, 208,
	80, 87, 83, 0, 0, 0, 238, 0, 0, 0,
	248, 217, 254, 0, 268, 91, 0, 300, 0, -2,
	0, 295, 294, 31, 0, 129, 0, 0, 40, 131,
	150, 0, 209, 212, 239, 0, 243, 0, 214, 213,
	0, 0, 0, 252, 270, 0, 0, 290, 23, 0,
	126, 0, 127, 128, 268, 84, 0, 0, 233, 216,
	249, 21, 0, 0, 298, -2, 296, 130, 270, 240,
	0, 244, 0, 0, 0, 271, 269, 20, 241, 0,
	0, 215, 0, 0, 0, 0, 245, 234, 0, 237,
	242, 235, 0, 0, 236,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 68, 3, 3, 3, 95, 87, 3,
	50, 52, 92, 90, 51, 91, 103, 93, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 156,
	76, 75, 77, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 97, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 86, 3, 98,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 69, 70, 71, 72, 73, 74, 78,
	79, 80, 81, 82, 83, 84, 85, 88, 89, 94,
	96, 99, 100, 101, 102, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:216
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:221
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:222
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:226
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 17:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:244
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 18:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:252
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 19:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:256
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 20:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:263
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[3].bytes2), Cache: yyDollar[4].str, Distinct: yyDollar[5].str, Hints: yyDollar[6].str, SelectExprs: yyDollar[7].selectExprs, From: yyDollar[8].tableExprs, Where: NewWhere(WhereStr, yyDollar[9].expr), GroupBy: GroupBy(yyDollar[10].exprs), Having: NewWhere(HavingStr, yyDollar[11].expr), With: yyDollar[1].tableExprs}
		}
	case 21:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:267
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:273
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: yyDollar[4].subquery, As: yyDollar[2].tableIdent}}
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:279
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 24:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:283
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:289
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:293
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 27:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:300
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 28:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:311
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:323
		{
			yyVAL.str = InsertStr
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:327
		{
			yyVAL.str = ReplaceStr
		}
	case 31:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:333
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:339
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 33:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:343
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:348
		{
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:349
		{
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:353
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:357
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:363
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].updateExprs}
		}
	case 39:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:369
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
		}
	case 40:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:373
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 41:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:378
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:382
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 43:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:388
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 44:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:392
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 45:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:397
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:402
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:408
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:414
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 49:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:422
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 50:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:427
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:437
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:443
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:447
		{
			switch v := string(yyDollar[1].bytes); v {
			case ShowDatabasesStr, ShowTablesStr, ShowKeyspacesStr, ShowShardsStr, ShowVSchemaTablesStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:456
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:462
		{
			yyVAL.statement = &Show{Type: yyDollar[2].str}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:468
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:474
		{
			yyVAL.statement = &OtherRead{}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:478
		{
			yyVAL.statement = &OtherRead{}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:482
		{
			yyVAL.statement = &OtherRead{}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:486
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:490
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:494
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:499
		{
			setAllowComments(yylex, true)
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:503
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 65:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:509
		{
			yyVAL.bytes2 = nil
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:513
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:519
		{
			yyVAL.str = UnionStr
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:523
		{
			yyVAL.str = UnionAllStr
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:527
		{
			yyVAL.str = UnionDistinctStr
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:532
		{
			yyVAL.str = ""
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:536
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:540
		{
			yyVAL.str = SQLCacheStr
		}
	case 73:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:545
		{
			yyVAL.str = ""
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:549
		{
			yyVAL.str = DistinctStr
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:554
		{
			yyVAL.str = ""
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:558
		{
			yyVAL.str = StraightJoinHint
		}
	case 77:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:563
		{
			yyVAL.selectExprs = nil
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:567
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:573
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:577
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:583
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:587
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:591
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 84:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:595
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 85:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:600
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:604
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:608
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:615
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 90:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:620
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:624
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:630
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:634
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:644
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:648
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:652
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:658
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:671
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 101:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:675
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 102:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:679
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:683
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 104:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:688
		{
			yyVAL.empty = struct{}{}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:690
		{
			yyVAL.empty = struct{}{}
		}
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:693
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:697
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:701
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:708
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:714
		{
			yyVAL.str = JoinStr
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:718
		{
			yyVAL.str = JoinStr
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:722
		{
			yyVAL.str = JoinStr
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:726
		{
			yyVAL.str = StraightJoinStr
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:732
		{
			yyVAL.str = LeftJoinStr
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:736
		{
			yyVAL.str = LeftJoinStr
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:740
		{
			yyVAL.str = RightJoinStr
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:744
		{
			yyVAL.str = RightJoinStr
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:750
		{
			yyVAL.str = NaturalJoinStr
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:754
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:764
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:768
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:774
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:778
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 125:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:783
		{
			yyVAL.indexHints = nil
		}
	case 126:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:787
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 127:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:791
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 128:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:795
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:801
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:805
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:810
		{
			yyVAL.expr = nil
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:814
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:820
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:824
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:828
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:832
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:836
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:840
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:844
		{
			yyVAL.expr = &Default{}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:850
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:854
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:860
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:864
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 144:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:868
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 145:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:872
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 146:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:876
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:880
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 148:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:884
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 149:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:888
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 150:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:892
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:896
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:902
		{
			yyVAL.str = IsNullStr
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:906
		{
			yyVAL.str = IsNotNullStr
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:910
		{
			yyVAL.str = IsTrueStr
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:914
		{
			yyVAL.str = IsNotTrueStr
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:918
		{
			yyVAL.str = IsFalseStr
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:922
		{
			yyVAL.str = IsNotFalseStr
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:928
		{
			yyVAL.str = EqualStr
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:932
		{
			yyVAL.str = LessThanStr
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:936
		{
			yyVAL.str = GreaterThanStr
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:940
		{
			yyVAL.str = LessEqualStr
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:944
		{
			yyVAL.str = GreaterEqualStr
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:948
		{
			yyVAL.str = NotEqualStr
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:952
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:957
		{
			yyVAL.expr = nil
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:961
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:967
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:971
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:975
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:981
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:987
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:991
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:997
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1001
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1005
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1009
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1015
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1019
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1023
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1027
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1031
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1035
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1039
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1043
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1047
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1051
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1055
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1059
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1063
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1067
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1071
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1075
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1079
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1083
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1087
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1091
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1095
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1099
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1107
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1121
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1125
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1129
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent}
		}
	case 207:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1147
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 208:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1151
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 209:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1155
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 210:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1165
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 211:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1169
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 212:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1173
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 213:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1177
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 214:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1181
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 215:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1185
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 216:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1189
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 217:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1193
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 218:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1197
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1207
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1211
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1215
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1219
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1224
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1229
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1234
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1239
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 229:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1253
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 230:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1257
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1261
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1265
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 233:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1271
		{
			yyVAL.str = ""
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1275
		{
			yyVAL.str = BooleanModeStr
		}
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1279
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 236:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1283
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1287
		{
			yyVAL.str = QueryExpansionStr
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1294
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str}
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1298
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str}
		}
	case 240:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1302
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1306
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes), Charset: yyDollar[5].str}
		}
	case 242:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1310
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes), Charset: yyDollar[7].str, Operator: CharacterSetStr}
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1314
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Charset: yyDollar[2].str}
		}
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1318
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Charset: yyDollar[4].str, Operator: CharacterSetStr}
		}
	case 245:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1322
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes), Scale: NewIntVal(yyDollar[5].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1327
		{
			yyVAL.expr = nil
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1331
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 248:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1336
		{
			yyVAL.str = string("")
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1340
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1346
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1350
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1356
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 253:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1361
		{
			yyVAL.expr = nil
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1365
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1371
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1375
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 257:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1379
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1385
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1389
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1393
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1397
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1401
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1405
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1409
		{
			yyVAL.expr = &NullVal{}
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1415
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1424
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1428
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 268:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1433
		{
			yyVAL.exprs = nil
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1437
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 270:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1442
		{
			yyVAL.expr = nil
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1446
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 272:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1451
		{
			yyVAL.orderBy = nil
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1455
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1461
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1465
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1471
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 277:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1476
		{
			yyVAL.str = AscScr
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1480
		{
			yyVAL.str = AscScr
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1484
		{
			yyVAL.str = DescScr
		}
	case 280:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1489
		{
			yyVAL.limit = nil
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1493
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1497
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1501
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 284:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1506
		{
			yyVAL.str = ""
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1510
		{
			yyVAL.str = ForUpdateStr
		}
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1514
		{
			yyVAL.str = ShareModeStr
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1527
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1531
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1535
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 290:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1540
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1544
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 292:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1548
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1555
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1559
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1563
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 296:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1567
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 297:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1572
		{
			yyVAL.updateExprs = nil
		}
	case 298:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1576
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1582
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1586
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1592
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1596
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1602
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1608
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1618
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1622
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1628
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 310:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1637
		{
			yyVAL.byt = 0
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1639
		{
			yyVAL.byt = 1
		}
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1642
		{
			yyVAL.empty = struct{}{}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1644
		{
			yyVAL.empty = struct{}{}
		}
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1647
		{
			yyVAL.str = ""
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1649
		{
			yyVAL.str = IgnoreStr
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1653
		{
			yyVAL.empty = struct{}{}
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1655
		{
			yyVAL.empty = struct{}{}
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1657
		{
			yyVAL.empty = struct{}{}
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1659
		{
			yyVAL.empty = struct{}{}
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1661
		{
			yyVAL.empty = struct{}{}
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1663
		{
			yyVAL.empty = struct{}{}
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1665
		{
			yyVAL.empty = struct{}{}
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1668
		{
			yyVAL.empty = struct{}{}
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1670
		{
			yyVAL.empty = struct{}{}
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1672
		{
			yyVAL.empty = struct{}{}
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1676
		{
			yyVAL.empty = struct{}{}
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1678
		{
			yyVAL.empty = struct{}{}
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1681
		{
			yyVAL.empty = struct{}{}
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1683
		{
			yyVAL.empty = struct{}{}
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1685
		{
			yyVAL.empty = struct{}{}
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1688
		{
			yyVAL.empty = struct{}{}
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1690
		{
			yyVAL.empty = struct{}{}
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1694
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1698
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1705
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1711
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1715
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1722
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1853
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1862
		{
			decNesting(yylex)
		}
	case 449:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1867
		{
			forceEOF(yylex)
		}
	case 450:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1872
		{
			forceEOF(yylex)
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1876
		{
			forceEOF(yylex)
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1880
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
